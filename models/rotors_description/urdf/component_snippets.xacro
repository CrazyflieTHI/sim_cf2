<?xml version="1.0"?>
<!--
  Copyright 2015 Fadri Furrer, ASL, ETH Zurich, Switzerland
  Copyright 2015 Michael Burri, ASL, ETH Zurich, Switzerland
  Copyright 2015 Mina Kamel, ASL, ETH Zurich, Switzerland
  Copyright 2015 Janosch Nikolic, ASL, ETH Zurich, Switzerland
  Copyright 2015 Markus Achtelik, ASL, ETH Zurich, Switzerland

  * Copyright 2018 Eric Goubault, Cosynus, LIX, France
  * Copyright 2018 Sylve Putot, Cosynus, LIX, France
  * Copyright 2018 Franck Djeumou, Cosynus, LIX, France

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<robot xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- Global variables -->
  <xacro:property name='imu_topic' value='gazebo/imu' />
  <xacro:property name='mag_topic' value='gazebo/magnetic_field' />
  <xacro:property name='pressure_topic' value='gazebo/air_pressure' />
  <xacro:property name="motorsSpeedTopic" value="/gazebo/command/motor_speed"/>
  
  <!-- Macro to add logging to a bag file. -->
  <xacro:macro name="bag_plugin_macro"
    params="namespace bag_file rotor_velocity_slowdown_sim">
    <gazebo>
      <plugin filename="librotors_gazebo_bag_plugin.so" name="rosbag">
        <robotNamespace>${namespace}</robotNamespace>
        <bagFileName>${bag_file}</bagFileName>
        <linkName>base_link</linkName>
        <frameId>base_link</frameId>
        <commandAttitudeThrustSubTopic>command/attitude</commandAttitudeThrustSubTopic>
        <commandAttitudeThrustPubTopic>command/attitude</commandAttitudeThrustPubTopic>
        <rotorVelocitySlowdownSim>${rotor_velocity_slowdown_sim}</rotorVelocitySlowdownSim>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add the controller interface. -->
  <xacro:macro name="controller_plugin_macro" params="namespace imu_sub_topic">
    <gazebo>
      <plugin name="controller_interface" filename="librotors_gazebo_controller_interface.so">
        <robotNamespace>${namespace}</robotNamespace>
        <commandAttitudeThrustSubTopic>/command/attitude</commandAttitudeThrustSubTopic>
        <commandRateThrustSubTopic>/command/rate</commandRateThrustSubTopic>
        <commandMotorSpeedSubTopic>/command/motor_speed</commandMotorSpeedSubTopic>
        <imuSubTopic>/${imu_sub_topic}</imuSubTopic>
        <motorSpeedCommandPubTopic>/gazebo/command/motor_speed</motorSpeedCommandPubTopic>
      </plugin>
    </gazebo>
  </xacro:macro>

    <!-- Macro to add the gps_plugin. -->
  <xacro:macro name="gps_plugin_macro" params="namespace gps_noise">
    <gazebo>
      <plugin name="gps_plugin" filename="libgazebo_gps_plugin.so">
        <robotNamespace>${namespace}</robotNamespace>
        <gpsNoise>${gps_noise}</gpsNoise>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add an IMU. -->
  <xacro:macro name="imu_plugin_macro"
    params="namespace imu_suffix parent_link imu_topic rate
      mass_imu_sensor gyroscope_noise_density gyroscope_random_walk
      gyroscope_bias_correlation_time gyroscope_turn_on_bias_sigma
      accelerometer_noise_density accelerometer_random_walk
      accelerometer_bias_correlation_time accelerometer_turn_on_bias_sigma
      *inertia *origin">
    <!-- IMU link -->
    <link name="${namespace}/imu${imu_suffix}_link">
      <inertial>
        <xacro:insert_block name="inertia" />
        <mass value="${mass_imu_sensor}" />  <!-- [kg] -->
        <origin xyz="0 0 0" rpy="0 0 0" />
      </inertial>
    </link>
    <!-- IMU joint -->
    <joint name="${namespace}/imu${imu_suffix}_joint" type="revolute">
      <xacro:insert_block name="origin" />
      <parent link="${parent_link}" />
      <child link="${namespace}/imu${imu_suffix}_link" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>
    <gazebo>
      <plugin filename="librotors_gazebo_imu_plugin.so" name="rotors_gazebo_imu${imu_suffix}_plugin">
      <!-- A good description of the IMU parameters can be found in the kalibr documentation:
           https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics -->
        <robotNamespace>${namespace}</robotNamespace> <!-- (string, required): ros namespace in which the messages are published -->
        <linkName>${namespace}/imu${imu_suffix}_link</linkName> <!-- (string, required): name of the body which holds the IMU sensor -->
        <imuTopic>${imu_topic}</imuTopic> <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
        <rate>${rate}</rate> <!-- Imu frequency update in Hz -->
        <gyroscopeNoiseDensity>${gyroscope_noise_density}</gyroscopeNoiseDensity> <!-- Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)] -->
        <gyroscopeRandomWalk>${gyroscope_random_walk}</gyroscopeRandomWalk> <!-- Gyroscope bias random walk [rad/s/s/sqrt(Hz)] -->
        <gyroscopeBiasCorrelationTime>${gyroscope_bias_correlation_time}</gyroscopeBiasCorrelationTime> <!-- Gyroscope bias correlation time constant [s] -->
        <gyroscopeTurnOnBiasSigma>${gyroscope_turn_on_bias_sigma}</gyroscopeTurnOnBiasSigma> <!-- Gyroscope turn on bias standard deviation [rad/s] -->
        <accelerometerNoiseDensity>${accelerometer_noise_density}</accelerometerNoiseDensity> <!-- Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)] -->
        <accelerometerRandomWalk>${accelerometer_random_walk}</accelerometerRandomWalk> <!-- Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)] -->
        <accelerometerBiasCorrelationTime>${accelerometer_bias_correlation_time}</accelerometerBiasCorrelationTime> <!-- Accelerometer bias correlation time constant [s] -->
        <accelerometerTurnOnBiasSigma>${accelerometer_turn_on_bias_sigma}</accelerometerTurnOnBiasSigma> <!-- Accelerometer turn on bias standard deviation [m/s^2] -->
      </plugin>
    </gazebo>
  </xacro:macro>

  <xacro:macro name="cf_handler_plugin_macro"
    params="namespace">
    <gazebo>
      <plugin filename="libgazebo_cf_handler_plugin.so" name="gazebo_cf_handler_plugin">
        <robotNamespace>${namespace}</robotNamespace>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add a magnetometer. -->
  <xacro:macro name="magnetometer_plugin_macro"
    params="namespace magnetometer_suffix parent_link magnetometer_topic
      mass_magnetometer_sensor rate ref_mag_north ref_mag_east ref_mag_down noise_normal noise_uniform_initial_bias *inertia *origin">
    <!-- Magnetometer link -->
    <link name="${namespace}/magnetometer${magnetometer_suffix}_link">
      <inertial>
        <xacro:insert_block name="inertia" />
        <mass value="${mass_magnetometer_sensor}" />  <!-- [kg] -->
        <origin xyz="0 0 0" rpy="0 0 0" />
      </inertial>
    </link>
    <!-- Magnetometer joint -->
    <joint name="${namespace}/magnetometer${magnetometer_suffix}_joint" type="revolute">
      <xacro:insert_block name="origin" />
      <parent link="${parent_link}" />
      <child link="${namespace}/magnetometer${magnetometer_suffix}_link" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>
    <gazebo>
      <plugin filename="librotors_gazebo_magnetometer_plugin.so" name="rotors_gazebo_magnetometer${magnetometer_suffix}_plugin">
        <robotNamespace>${namespace}</robotNamespace> <!-- (string, required): ros namespace in which the messages are published -->
        <linkName>${namespace}/magnetometer${magnetometer_suffix}_link</linkName> <!-- (string, required): name of the body which holds the magnetometer -->
        <magnetometerTopic>${magnetometer_topic}</magnetometerTopic> <!-- (string): name of the sensor output topic and prefix of service names (defaults to 'magnetic_field') -->
        <rate>${rate}</rate>
        <!-- [Tesla] Below is the reference Earth's magnetic field at the reference location in NED frame.
             The default reference location is Zurich (lat=+47.3667degN, lon=+8.5500degE, h=+500m, WGS84).
       You can obtain the magnetic field strength for your location using the World Magnetic Model: 
             http://www.ngdc.noaa.gov/geomag-web/#igrfwmm -->
        <refMagNorth>${ref_mag_north}</refMagNorth>
        <refMagEast>${ref_mag_east}</refMagEast>
        <refMagDown>${ref_mag_down}</refMagDown>
        <noiseNormal>${noise_normal}</noiseNormal> <!-- standard deviation of additive white gaussian noise [Tesla] -->
        <noiseUniformInitialBias>${noise_uniform_initial_bias}</noiseUniformInitialBias> <!-- symmetric bounds of uniform noise for initial sensor bias [Tesla] -->
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add an air pressure sensor. -->
  <xacro:macro name="pressure_sensor_plugin_macro"
    params="namespace pressure_sensor_suffix parent_link pressure_topic
      mass_pressure_sensor rate reference_altitude pressure_variance *inertia
      *origin">
    <!-- Pressure sensor link -->
    <link name="${namespace}/pressure_sensor${pressure_sensor_suffix}_link">
      <inertial>
        <xacro:insert_block name="inertia" />
        <mass value="${mass_pressure_sensor}" />  <!-- [kg] -->
        <origin xyz="0 0 0" rpy="0 0 0" />
      </inertial>
    </link>
    <!-- Pressure sensor joint -->
    <joint name="${namespace}/pressure_sensor${pressure_sensor_suffix}_joint" type="revolute">
      <xacro:insert_block name="origin" />
      <parent link="${parent_link}" />
      <child link="${namespace}/pressure_sensor${pressure_sensor_suffix}_link" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>
    <gazebo>
      <plugin filename="librotors_gazebo_pressure_plugin.so" name="rotors_gazebo_pressure_sensor${pressure_sensor_suffix}_plugin">
        <robotNamespace>${namespace}</robotNamespace> <!-- (string, required): ros namespace in which the messages are published -->
        <linkName>${namespace}/pressure_sensor${pressure_sensor_suffix}_link</linkName> <!-- (string, required): name of the body which holds the pressure sensor -->
        <pressureTopic>${pressure_topic}</pressureTopic> <!-- (string): name of the sensor output topic and prefix of service names (defaults to 'air_pressure') -->
        <rate>${rate}</rate>
        <referenceAltitude>${reference_altitude}</referenceAltitude> <!-- the initial altitude [m] -->
        <pressureVariance>${pressure_variance}</pressureVariance> <!-- the air pressure variance [Pa^2] -->
      </plugin>
    </gazebo>
  </xacro:macro>

    <!-- Macro to add the lps_plugin. -->
  <xacro:macro name="lps_plugin_macro" params="namespace lps_std_dev rate">
    <gazebo>
      <plugin name="lps_plugin" filename="librotors_gazebo_lps_plugin.so">
        <robotNamespace>${namespace}</robotNamespace>
        <lpsStdDev>${lps_std_dev}</lpsStdDev>
        <rate>${rate}</rate>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add the mr_plugin. -->
  <xacro:if value="${enable_mr_deck}">
    <xacro:macro name="mr_plugin_macro" params="namespace rate">
      <gazebo>
        <plugin name="mr_plugin" filename="librotors_gazebo_mr_plugin.so">
          <robotNamespace>${namespace}</robotNamespace>
          <rate>${rate}</rate>
          <visualize_ray>${mr_deck_visualize}</visualize_ray>
        </plugin>
      </gazebo>
    </xacro:macro>
  </xacro:if>

  <!-- Macro to add the tdoa_plugin. -->
  <xacro:macro name="tdoa_plugin_macro" params="namespace">
    <gazebo>
      <plugin name="tdoa_plugin" filename="librotors_gazebo_tdoa_plugin.so">
        <robotNamespace>${namespace}</robotNamespace>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add a generic odometry sensor. -->
  <xacro:macro name="odometry_plugin_macro"
    params="
      namespace odometry_sensor_suffix parent_link pose_topic pose_with_covariance_topic
      position_topic transform_topic odometry_topic parent_frame_id child_frame_id
      mass_odometry_sensor measurement_divisor measurement_delay unknown_delay
      noise_normal_position noise_normal_quaternion noise_normal_linear_velocity
      noise_normal_angular_velocity noise_uniform_position
      noise_uniform_quaternion noise_uniform_linear_velocity
      noise_uniform_angular_velocity enable_odometry_map odometry_map
      image_scale *inertia *origin">
    <!-- odometry link -->
    <link name="${namespace}/odometry_sensor${odometry_sensor_suffix}_link">
      <inertial>
        <xacro:insert_block name="inertia" />
        <mass value="${mass_odometry_sensor}" />  <!-- [kg] -->
      </inertial>
    </link>
    <!-- odometry joint -->
    <joint name="${namespace}/odometry_sensor${odometry_sensor_suffix}_joint" type="revolute">
      <parent link="${parent_link}" />
      <xacro:insert_block name="origin" />
      <child link="${namespace}/odometry_sensor${odometry_sensor_suffix}_link" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>
    <gazebo>
      <plugin filename="librotors_gazebo_odometry_plugin.so" name="odometry_sensor${odometry_sensor_suffix}">
        <linkName>${namespace}/odometry_sensor${odometry_sensor_suffix}_link</linkName>
        <robotNamespace>${namespace}</robotNamespace>
        <poseTopic>${pose_topic}</poseTopic>
        <poseWithCovarianceTopic>${pose_with_covariance_topic}</poseWithCovarianceTopic>
        <positionTopic>${position_topic}</positionTopic>
        <transformTopic>${transform_topic}</transformTopic>
        <odometryTopic>${odometry_topic}</odometryTopic>
        <parentFrameId>${parent_frame_id}</parentFrameId> <!-- Use the scoped link name here. e.g. Model::link. -->
        <childFrameId>${child_frame_id}</childFrameId>
        <measurementDivisor>${measurement_divisor}</measurementDivisor> <!-- only every (seq % measurementDivisor) == 0 measurement is published [int] -->
        <measurementDelay>${measurement_delay}</measurementDelay> <!-- time that measurement gets held back before it's published in [simulation cycles (int)] -->
        <unknownDelay>${unknown_delay}</unknownDelay> <!-- additional delay, that just gets added to the timestamp [s] -->
        <noiseNormalPosition>${noise_normal_position}</noiseNormalPosition> <!-- standard deviation of additive white gaussian noise [m] -->
        <noiseNormalQuaternion>${noise_normal_quaternion}</noiseNormalQuaternion> <!-- standard deviation white gaussian noise [rad]: q_m = q*quaternionFromSmallAngleApproximation(noiseNormalQ) -->
        <noiseNormalLinearVelocity>${noise_normal_linear_velocity}</noiseNormalLinearVelocity> <!-- standard deviation of additive white gaussian noise [m/s] -->
        <noiseNormalAngularVelocity>${noise_normal_angular_velocity}</noiseNormalAngularVelocity> <!-- standard deviation of additive white gaussian noise [rad/s] -->
        <noiseUniformPosition>${noise_uniform_position}</noiseUniformPosition> <!-- symmetric bounds of uniform noise [m] -->
        <noiseUniformQuaternion>${noise_uniform_quaternion}</noiseUniformQuaternion> <!-- symmetric bounds of uniform noise [rad], computation see above -->
        <noiseUniformLinearVelocity>${noise_uniform_linear_velocity}</noiseUniformLinearVelocity> <!-- symmetric bounds of uniform noise [m/s] -->
        <noiseUniformAngularVelocity>${noise_uniform_angular_velocity}</noiseUniformAngularVelocity> <!-- symmetric bounds of uniform noise [rad/s] -->
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add the wind plugin. -->
  <xacro:macro name="wind_plugin_macro"
    params="namespace xyz_offset wind_direction wind_force_mean
      wind_gust_direction wind_gust_duration wind_gust_start
      wind_gust_force_mean wind_speed_mean use_custom_static_wind_field 
      custom_wind_field_path">
    <gazebo>
      <plugin filename="librotors_gazebo_wind_plugin.so" name="wind_plugin">
        <frameId>world</frameId>
        <linkName>${namespace}/base_link</linkName>
        <robotNamespace>${namespace}</robotNamespace>
        <xyzOffset>${xyz_offset}</xyzOffset> <!-- [m] [m] [m] -->
        <windDirection>${wind_direction}</windDirection>
        <windForceMean>${wind_force_mean}</windForceMean> <!-- [N] -->
        <windGustDirection>${wind_gust_direction}</windGustDirection>
        <windGustDuration>${wind_gust_duration}</windGustDuration> <!-- [s] -->
        <windGustStart>${wind_gust_start}</windGustStart> <!-- [s] -->
        <windGustForceMean>${wind_gust_force_mean}</windGustForceMean> <!-- [N] -->
        <windSpeedMean>${wind_speed_mean}</windSpeedMean> <!-- [m/s] -->
        <useCustomStaticWindField>${use_custom_static_wind_field}</useCustomStaticWindField>
        <customWindFieldPath>${custom_wind_field_path}</customWindFieldPath> <!-- from ~/.ros -->
      </plugin>
    </gazebo>
  </xacro:macro>

</robot>
